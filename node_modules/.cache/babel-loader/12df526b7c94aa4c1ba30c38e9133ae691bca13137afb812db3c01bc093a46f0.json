{"ast":null,"code":"import { gameActions } from \"store/game-slice\";\nimport { memoryGameActions } from \"store/memoryGame-slice\";\nimport { MAX_LEVEL, setCurrentLevel, getCurrentLevel, getLevelData } from \"data/data\";\nexport const getGameData = () => {\n  return dispatch => {\n    const currentLevel = getCurrentLevel();\n    const {\n      size,\n      cards\n    } = getLevelData(currentLevel);\n    dispatch(gameActions.setData({\n      levelCount: MAX_LEVEL,\n      currentLevel: currentLevel\n    }));\n    dispatch(memoryGameActions.setData({\n      size,\n      cards,\n      cardCount: cards.length,\n      attempt: calculateAttemtsCount(cards.length) // You can create algorith to calculate atempt size.\n    }));\n  };\n};\n\nexport const updateLevel = (reset = false) => {\n  return dispatch => {\n    let currentLevel = getCurrentLevel();\n    if (reset) {\n      currentLevel = 1;\n    } else {\n      currentLevel++;\n    }\n    setCurrentLevel(currentLevel);\n    const {\n      size,\n      cards\n    } = getLevelData(currentLevel);\n    dispatch(gameActions.setData({\n      levelCount: MAX_LEVEL,\n      currentLevel: currentLevel\n    }));\n    dispatch(memoryGameActions.setData({\n      size,\n      cards,\n      cardCount: cards.length,\n      attempt: calculateAttemtsCount(cards.length)\n    }));\n  };\n};\nconst calculateAttemtsCount = count => Math.ceil(count * 1.5);","map":{"version":3,"names":["gameActions","memoryGameActions","MAX_LEVEL","setCurrentLevel","getCurrentLevel","getLevelData","getGameData","dispatch","currentLevel","size","cards","setData","levelCount","cardCount","length","attempt","calculateAttemtsCount","updateLevel","reset","count","Math","ceil"],"sources":["/Users/mac/Champion Memory/src/store/gameActions.js"],"sourcesContent":["import { gameActions } from \"store/game-slice\";\nimport { memoryGameActions } from \"store/memoryGame-slice\";\nimport {\n  MAX_LEVEL,\n  setCurrentLevel,\n  getCurrentLevel,\n  getLevelData,\n} from \"data/data\";\n\nexport const getGameData = () => {\n  return (dispatch) => {\n    const currentLevel = getCurrentLevel();\n    const { size, cards } = getLevelData(currentLevel);\n\n    dispatch(\n      gameActions.setData({\n        levelCount: MAX_LEVEL,\n        currentLevel: currentLevel,\n      })\n    );\n\n    dispatch(\n      memoryGameActions.setData({\n        size,\n        cards,\n        cardCount: cards.length,\n        attempt: calculateAttemtsCount(cards.length), // You can create algorith to calculate atempt size.\n      })\n    );\n  };\n};\n\nexport const updateLevel = (reset = false) => {\n  return (dispatch) => {\n    let currentLevel = getCurrentLevel();\n    if (reset) {\n      currentLevel = 1;\n    } else {\n      currentLevel++;\n    }\n    setCurrentLevel(currentLevel);\n    const { size, cards } = getLevelData(currentLevel);\n\n    dispatch(\n      gameActions.setData({\n        levelCount: MAX_LEVEL,\n        currentLevel: currentLevel,\n      })\n    );\n\n    dispatch(\n      memoryGameActions.setData({\n        size,\n        cards,\n        cardCount: cards.length,\n        attempt: calculateAttemtsCount(cards.length),\n      })\n    );\n  };\n};\n\nconst calculateAttemtsCount = (count) => Math.ceil(count * 1.5);\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,iBAAiB,QAAQ,wBAAwB;AAC1D,SACEC,SAAS,EACTC,eAAe,EACfC,eAAe,EACfC,YAAY,QACP,WAAW;AAElB,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAC/B,OAAQC,QAAQ,IAAK;IACnB,MAAMC,YAAY,GAAGJ,eAAe,CAAC,CAAC;IACtC,MAAM;MAAEK,IAAI;MAAEC;IAAM,CAAC,GAAGL,YAAY,CAACG,YAAY,CAAC;IAElDD,QAAQ,CACNP,WAAW,CAACW,OAAO,CAAC;MAClBC,UAAU,EAAEV,SAAS;MACrBM,YAAY,EAAEA;IAChB,CAAC,CACH,CAAC;IAEDD,QAAQ,CACNN,iBAAiB,CAACU,OAAO,CAAC;MACxBF,IAAI;MACJC,KAAK;MACLG,SAAS,EAAEH,KAAK,CAACI,MAAM;MACvBC,OAAO,EAAEC,qBAAqB,CAACN,KAAK,CAACI,MAAM,CAAC,CAAE;IAChD,CAAC,CACH,CAAC;EACH,CAAC;AACH,CAAC;;AAED,OAAO,MAAMG,WAAW,GAAGA,CAACC,KAAK,GAAG,KAAK,KAAK;EAC5C,OAAQX,QAAQ,IAAK;IACnB,IAAIC,YAAY,GAAGJ,eAAe,CAAC,CAAC;IACpC,IAAIc,KAAK,EAAE;MACTV,YAAY,GAAG,CAAC;IAClB,CAAC,MAAM;MACLA,YAAY,EAAE;IAChB;IACAL,eAAe,CAACK,YAAY,CAAC;IAC7B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGL,YAAY,CAACG,YAAY,CAAC;IAElDD,QAAQ,CACNP,WAAW,CAACW,OAAO,CAAC;MAClBC,UAAU,EAAEV,SAAS;MACrBM,YAAY,EAAEA;IAChB,CAAC,CACH,CAAC;IAEDD,QAAQ,CACNN,iBAAiB,CAACU,OAAO,CAAC;MACxBF,IAAI;MACJC,KAAK;MACLG,SAAS,EAAEH,KAAK,CAACI,MAAM;MACvBC,OAAO,EAAEC,qBAAqB,CAACN,KAAK,CAACI,MAAM;IAC7C,CAAC,CACH,CAAC;EACH,CAAC;AACH,CAAC;AAED,MAAME,qBAAqB,GAAIG,KAAK,IAAKC,IAAI,CAACC,IAAI,CAACF,KAAK,GAAG,GAAG,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}