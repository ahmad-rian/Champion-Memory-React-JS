{"ast":null,"code":"import { IMAGE_CARDS } from \"./imageCards\";\nimport { WORD_CARDS } from \"./wordCards\";\n\n// Levels with sizes\nconst LEVELS = {\n  1: \"3x4\",\n  // 12 card\n  2: \"4x4\",\n  // 16 card\n  3: \"4x5\",\n  // 20 card\n  4: \"5x6\",\n  // 30 card\n  5: \"6x6\" // 36 card\n};\n\nconst MAX_CARD_COUNT = 20;\nexport const MAX_LEVEL = 5;\nlet currentLevel = 1;\n\n// Update currentLevel;\nexport const setCurrentLevel = level => {\n  currentLevel = level;\n  localStorage.setItem(\"level\", currentLevel);\n};\nexport const getCurrentLevel = () => {\n  let level = localStorage.getItem(\"level\");\n  if (level) {\n    level = parseInt(level);\n    currentLevel = level;\n  }\n  return currentLevel;\n};\nexport const getLevelData = level => {\n  //\n  const size = LEVELS[level];\n  const [row, col] = size.split(\"x\");\n  let count = parseInt(row) * parseInt(col) / 2;\n  const nums = new Set();\n  while (nums.size < count) {\n    let num = Math.ceil(Math.random() * MAX_CARD_COUNT);\n    if (num > 0) nums.add(num);\n  }\n  const images = [];\n  const words = [];\n  nums.forEach(num => {\n    images.push(IMAGE_CARDS.find(i => i.id === num));\n    words.push(WORD_CARDS.find(i => i.id === num));\n  });\n  let gameCards = [...images, ...words];\n  shuffleArray(gameCards);\n  return {\n    size: size,\n    cards: gameCards\n  };\n};\nconst shuffleArray = array => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n};","map":{"version":3,"names":["IMAGE_CARDS","WORD_CARDS","LEVELS","MAX_CARD_COUNT","MAX_LEVEL","currentLevel","setCurrentLevel","level","localStorage","setItem","getCurrentLevel","getItem","parseInt","getLevelData","size","row","col","split","count","nums","Set","num","Math","ceil","random","add","images","words","forEach","push","find","i","id","gameCards","shuffleArray","cards","array","length","j","floor","temp"],"sources":["/Users/mac/Champion Memory/src/data/data.js"],"sourcesContent":["import { IMAGE_CARDS } from \"./imageCards\";\nimport { WORD_CARDS } from \"./wordCards\";\n\n// Levels with sizes\nconst LEVELS = {\n  1: \"3x4\", // 12 card\n  2: \"4x4\", // 16 card\n  3: \"4x5\", // 20 card\n  4: \"5x6\", // 30 card\n  5: \"6x6\", // 36 card\n};\n\nconst MAX_CARD_COUNT = 20;\n\nexport const MAX_LEVEL = 5;\n\nlet currentLevel = 1;\n\n// Update currentLevel;\nexport const setCurrentLevel = (level) => {\n  currentLevel = level;\n  localStorage.setItem(\"level\", currentLevel);\n};\n\nexport const getCurrentLevel = () => {\n  let level = localStorage.getItem(\"level\");\n  if (level) {\n    level = parseInt(level);\n    currentLevel = level;\n  }\n  return currentLevel;\n};\n\nexport const getLevelData = (level) => {\n  //\n  const size = LEVELS[level];\n  const [row, col] = size.split(\"x\");\n  let count = (parseInt(row) * parseInt(col)) / 2;\n\n  const nums = new Set();\n\n  while (nums.size < count) {\n    let num = Math.ceil(Math.random() * MAX_CARD_COUNT);\n    if (num > 0) nums.add(num);\n  }\n\n  const images = [];\n  const words = [];\n  nums.forEach((num) => {\n    images.push(IMAGE_CARDS.find((i) => i.id === num));\n    words.push(WORD_CARDS.find((i) => i.id === num));\n  });\n\n  let gameCards = [...images, ...words];\n\n  shuffleArray(gameCards);\n\n  return {\n    size: size,\n    cards: gameCards,\n  };\n};\n\nconst shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,cAAc;AAC1C,SAASC,UAAU,QAAQ,aAAa;;AAExC;AACA,MAAMC,MAAM,GAAG;EACb,CAAC,EAAE,KAAK;EAAE;EACV,CAAC,EAAE,KAAK;EAAE;EACV,CAAC,EAAE,KAAK;EAAE;EACV,CAAC,EAAE,KAAK;EAAE;EACV,CAAC,EAAE,KAAK,CAAE;AACZ,CAAC;;AAED,MAAMC,cAAc,GAAG,EAAE;AAEzB,OAAO,MAAMC,SAAS,GAAG,CAAC;AAE1B,IAAIC,YAAY,GAAG,CAAC;;AAEpB;AACA,OAAO,MAAMC,eAAe,GAAIC,KAAK,IAAK;EACxCF,YAAY,GAAGE,KAAK;EACpBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,YAAY,CAAC;AAC7C,CAAC;AAED,OAAO,MAAMK,eAAe,GAAGA,CAAA,KAAM;EACnC,IAAIH,KAAK,GAAGC,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACzC,IAAIJ,KAAK,EAAE;IACTA,KAAK,GAAGK,QAAQ,CAACL,KAAK,CAAC;IACvBF,YAAY,GAAGE,KAAK;EACtB;EACA,OAAOF,YAAY;AACrB,CAAC;AAED,OAAO,MAAMQ,YAAY,GAAIN,KAAK,IAAK;EACrC;EACA,MAAMO,IAAI,GAAGZ,MAAM,CAACK,KAAK,CAAC;EAC1B,MAAM,CAACQ,GAAG,EAAEC,GAAG,CAAC,GAAGF,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC;EAClC,IAAIC,KAAK,GAAIN,QAAQ,CAACG,GAAG,CAAC,GAAGH,QAAQ,CAACI,GAAG,CAAC,GAAI,CAAC;EAE/C,MAAMG,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;EAEtB,OAAOD,IAAI,CAACL,IAAI,GAAGI,KAAK,EAAE;IACxB,IAAIG,GAAG,GAAGC,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGrB,cAAc,CAAC;IACnD,IAAIkB,GAAG,GAAG,CAAC,EAAEF,IAAI,CAACM,GAAG,CAACJ,GAAG,CAAC;EAC5B;EAEA,MAAMK,MAAM,GAAG,EAAE;EACjB,MAAMC,KAAK,GAAG,EAAE;EAChBR,IAAI,CAACS,OAAO,CAAEP,GAAG,IAAK;IACpBK,MAAM,CAACG,IAAI,CAAC7B,WAAW,CAAC8B,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKX,GAAG,CAAC,CAAC;IAClDM,KAAK,CAACE,IAAI,CAAC5B,UAAU,CAAC6B,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKX,GAAG,CAAC,CAAC;EAClD,CAAC,CAAC;EAEF,IAAIY,SAAS,GAAG,CAAC,GAAGP,MAAM,EAAE,GAAGC,KAAK,CAAC;EAErCO,YAAY,CAACD,SAAS,CAAC;EAEvB,OAAO;IACLnB,IAAI,EAAEA,IAAI;IACVqB,KAAK,EAAEF;EACT,CAAC;AACH,CAAC;AAED,MAAMC,YAAY,GAAIE,KAAK,IAAK;EAC9B,KAAK,IAAIL,CAAC,GAAGK,KAAK,CAACC,MAAM,GAAG,CAAC,EAAEN,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACzC,MAAMO,CAAC,GAAGhB,IAAI,CAACiB,KAAK,CAACjB,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIO,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,MAAMS,IAAI,GAAGJ,KAAK,CAACL,CAAC,CAAC;IACrBK,KAAK,CAACL,CAAC,CAAC,GAAGK,KAAK,CAACE,CAAC,CAAC;IACnBF,KAAK,CAACE,CAAC,CAAC,GAAGE,IAAI;EACjB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}