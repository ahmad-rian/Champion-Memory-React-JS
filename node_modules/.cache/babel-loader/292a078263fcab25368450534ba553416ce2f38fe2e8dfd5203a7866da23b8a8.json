{"ast":null,"code":"import{gameActions}from\"store/game-slice\";import{memoryGameActions}from\"store/memoryGame-slice\";import{MAX_LEVEL,setCurrentLevel,getCurrentLevel,getLevelData}from\"data/data\";export var getGameData=function getGameData(){return function(dispatch){var currentLevel=getCurrentLevel();var _getLevelData=getLevelData(currentLevel),size=_getLevelData.size,cards=_getLevelData.cards;dispatch(gameActions.setData({levelCount:MAX_LEVEL,currentLevel:currentLevel}));dispatch(memoryGameActions.setData({size:size,cards:cards,cardCount:cards.length,attempt:calculateAttemtsCount(cards.length)// You can create algorith to calculate atempt size.\n}));};};export var updateLevel=function updateLevel(){var reset=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;return function(dispatch){var currentLevel=getCurrentLevel();if(reset){currentLevel=1;}else{currentLevel++;}setCurrentLevel(currentLevel);var _getLevelData2=getLevelData(currentLevel),size=_getLevelData2.size,cards=_getLevelData2.cards;dispatch(gameActions.setData({levelCount:MAX_LEVEL,currentLevel:currentLevel}));dispatch(memoryGameActions.setData({size:size,cards:cards,cardCount:cards.length,attempt:calculateAttemtsCount(cards.length)}));};};var calculateAttemtsCount=function calculateAttemtsCount(count){return Math.ceil(count*1.5);};","map":{"version":3,"names":["gameActions","memoryGameActions","MAX_LEVEL","setCurrentLevel","getCurrentLevel","getLevelData","getGameData","dispatch","currentLevel","_getLevelData","size","cards","setData","levelCount","cardCount","length","attempt","calculateAttemtsCount","updateLevel","reset","arguments","undefined","_getLevelData2","count","Math","ceil"],"sources":["/Users/mac/react-memory-game-main/src/store/gameActions.js"],"sourcesContent":["import { gameActions } from \"store/game-slice\";\nimport { memoryGameActions } from \"store/memoryGame-slice\";\nimport {\n  MAX_LEVEL,\n  setCurrentLevel,\n  getCurrentLevel,\n  getLevelData,\n} from \"data/data\";\n\nexport const getGameData = () => {\n  return (dispatch) => {\n    const currentLevel = getCurrentLevel();\n    const { size, cards } = getLevelData(currentLevel);\n\n    dispatch(\n      gameActions.setData({\n        levelCount: MAX_LEVEL,\n        currentLevel: currentLevel,\n      })\n    );\n\n    dispatch(\n      memoryGameActions.setData({\n        size,\n        cards,\n        cardCount: cards.length,\n        attempt: calculateAttemtsCount(cards.length), // You can create algorith to calculate atempt size.\n      })\n    );\n  };\n};\n\nexport const updateLevel = (reset = false) => {\n  return (dispatch) => {\n    let currentLevel = getCurrentLevel();\n    if (reset) {\n      currentLevel = 1;\n    } else {\n      currentLevel++;\n    }\n    setCurrentLevel(currentLevel);\n    const { size, cards } = getLevelData(currentLevel);\n\n    dispatch(\n      gameActions.setData({\n        levelCount: MAX_LEVEL,\n        currentLevel: currentLevel,\n      })\n    );\n\n    dispatch(\n      memoryGameActions.setData({\n        size,\n        cards,\n        cardCount: cards.length,\n        attempt: calculateAttemtsCount(cards.length),\n      })\n    );\n  };\n};\n\nconst calculateAttemtsCount = (count) => Math.ceil(count * 1.5);\n"],"mappings":"AAAA,OAASA,WAAW,KAAQ,kBAAkB,CAC9C,OAASC,iBAAiB,KAAQ,wBAAwB,CAC1D,OACEC,SAAS,CACTC,eAAe,CACfC,eAAe,CACfC,YAAY,KACP,WAAW,CAElB,MAAO,IAAM,CAAAC,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAA,CAAS,CAC/B,MAAO,UAACC,QAAQ,CAAK,CACnB,GAAM,CAAAC,YAAY,CAAGJ,eAAe,CAAC,CAAC,CACtC,IAAAK,aAAA,CAAwBJ,YAAY,CAACG,YAAY,CAAC,CAA1CE,IAAI,CAAAD,aAAA,CAAJC,IAAI,CAAEC,KAAK,CAAAF,aAAA,CAALE,KAAK,CAEnBJ,QAAQ,CACNP,WAAW,CAACY,OAAO,CAAC,CAClBC,UAAU,CAAEX,SAAS,CACrBM,YAAY,CAAEA,YAChB,CAAC,CACH,CAAC,CAEDD,QAAQ,CACNN,iBAAiB,CAACW,OAAO,CAAC,CACxBF,IAAI,CAAJA,IAAI,CACJC,KAAK,CAALA,KAAK,CACLG,SAAS,CAAEH,KAAK,CAACI,MAAM,CACvBC,OAAO,CAAEC,qBAAqB,CAACN,KAAK,CAACI,MAAM,CAAG;AAChD,CAAC,CACH,CAAC,CACH,CAAC,CACH,CAAC,CAED,MAAO,IAAM,CAAAG,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAA,CAAsB,IAAlB,CAAAC,KAAK,CAAAC,SAAA,CAAAL,MAAA,IAAAK,SAAA,MAAAC,SAAA,CAAAD,SAAA,IAAG,KAAK,CACvC,MAAO,UAACb,QAAQ,CAAK,CACnB,GAAI,CAAAC,YAAY,CAAGJ,eAAe,CAAC,CAAC,CACpC,GAAIe,KAAK,CAAE,CACTX,YAAY,CAAG,CAAC,CAClB,CAAC,IAAM,CACLA,YAAY,EAAE,CAChB,CACAL,eAAe,CAACK,YAAY,CAAC,CAC7B,IAAAc,cAAA,CAAwBjB,YAAY,CAACG,YAAY,CAAC,CAA1CE,IAAI,CAAAY,cAAA,CAAJZ,IAAI,CAAEC,KAAK,CAAAW,cAAA,CAALX,KAAK,CAEnBJ,QAAQ,CACNP,WAAW,CAACY,OAAO,CAAC,CAClBC,UAAU,CAAEX,SAAS,CACrBM,YAAY,CAAEA,YAChB,CAAC,CACH,CAAC,CAEDD,QAAQ,CACNN,iBAAiB,CAACW,OAAO,CAAC,CACxBF,IAAI,CAAJA,IAAI,CACJC,KAAK,CAALA,KAAK,CACLG,SAAS,CAAEH,KAAK,CAACI,MAAM,CACvBC,OAAO,CAAEC,qBAAqB,CAACN,KAAK,CAACI,MAAM,CAC7C,CAAC,CACH,CAAC,CACH,CAAC,CACH,CAAC,CAED,GAAM,CAAAE,qBAAqB,CAAG,QAAxB,CAAAA,qBAAqBA,CAAIM,KAAK,QAAK,CAAAC,IAAI,CAACC,IAAI,CAACF,KAAK,CAAG,GAAG,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}