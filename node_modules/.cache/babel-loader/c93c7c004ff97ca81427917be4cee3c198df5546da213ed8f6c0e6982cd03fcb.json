{"ast":null,"code":"import _slicedToArray from\"/Users/mac/react-memory-game-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{IMAGE_CARDS}from\"./imageCards\";import{WORD_CARDS}from\"./wordCards\";// Levels with sizes\nvar LEVELS={1:\"3x4\",// 12 card\n2:\"4x4\",// 16 card\n3:\"4x5\",// 20 card\n4:\"5x6\",// 30 card\n5:\"6x6\"// 36 card\n};var MAX_CARD_COUNT=20;export var MAX_LEVEL=5;var currentLevel=1;// Update currentLevel;\nexport var setCurrentLevel=function setCurrentLevel(level){currentLevel=level;localStorage.setItem(\"level\",currentLevel);};export var getCurrentLevel=function getCurrentLevel(){var level=localStorage.getItem(\"level\");if(level){level=parseInt(level);currentLevel=level;}return currentLevel;};export var getLevelData=function getLevelData(level){//\nvar size=LEVELS[level];var _size$split=size.split(\"x\"),_size$split2=_slicedToArray(_size$split,2),row=_size$split2[0],col=_size$split2[1];var count=parseInt(row)*parseInt(col)/2;var nums=new Set();while(nums.size<count){var num=Math.ceil(Math.random()*MAX_CARD_COUNT);if(num>0)nums.add(num);}var images=[];var words=[];nums.forEach(function(num){images.push(IMAGE_CARDS.find(function(i){return i.id===num;}));words.push(WORD_CARDS.find(function(i){return i.id===num;}));});var gameCards=[].concat(images,words);shuffleArray(gameCards);return{size:size,cards:gameCards};};var shuffleArray=function shuffleArray(array){for(var i=array.length-1;i>0;i--){var j=Math.floor(Math.random()*(i+1));var temp=array[i];array[i]=array[j];array[j]=temp;}};","map":{"version":3,"names":["IMAGE_CARDS","WORD_CARDS","LEVELS","MAX_CARD_COUNT","MAX_LEVEL","currentLevel","setCurrentLevel","level","localStorage","setItem","getCurrentLevel","getItem","parseInt","getLevelData","size","_size$split","split","_size$split2","_slicedToArray","row","col","count","nums","Set","num","Math","ceil","random","add","images","words","forEach","push","find","i","id","gameCards","concat","shuffleArray","cards","array","length","j","floor","temp"],"sources":["/Users/mac/react-memory-game-main/src/data/data.js"],"sourcesContent":["import { IMAGE_CARDS } from \"./imageCards\";\nimport { WORD_CARDS } from \"./wordCards\";\n\n// Levels with sizes\nconst LEVELS = {\n  1: \"3x4\", // 12 card\n  2: \"4x4\", // 16 card\n  3: \"4x5\", // 20 card\n  4: \"5x6\", // 30 card\n  5: \"6x6\", // 36 card\n};\n\nconst MAX_CARD_COUNT = 20;\n\nexport const MAX_LEVEL = 5;\n\nlet currentLevel = 1;\n\n// Update currentLevel;\nexport const setCurrentLevel = (level) => {\n  currentLevel = level;\n  localStorage.setItem(\"level\", currentLevel);\n};\n\nexport const getCurrentLevel = () => {\n  let level = localStorage.getItem(\"level\");\n  if (level) {\n    level = parseInt(level);\n    currentLevel = level;\n  }\n  return currentLevel;\n};\n\nexport const getLevelData = (level) => {\n  //\n  const size = LEVELS[level];\n  const [row, col] = size.split(\"x\");\n  let count = (parseInt(row) * parseInt(col)) / 2;\n\n  const nums = new Set();\n\n  while (nums.size < count) {\n    let num = Math.ceil(Math.random() * MAX_CARD_COUNT);\n    if (num > 0) nums.add(num);\n  }\n\n  const images = [];\n  const words = [];\n  nums.forEach((num) => {\n    images.push(IMAGE_CARDS.find((i) => i.id === num));\n    words.push(WORD_CARDS.find((i) => i.id === num));\n  });\n\n  let gameCards = [...images, ...words];\n\n  shuffleArray(gameCards);\n\n  return {\n    size: size,\n    cards: gameCards,\n  };\n};\n\nconst shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}